{"version":3,"sources":["../src/lib/is-type.js"],"names":[],"mappings":"q4hBACA,GAAM,CAAA,MAAM,CAAG,QAAT,CAAA,MAAS,CAAC,IAAD,CAAU,CACvB,GAAI,CAAA,KAAK,CAAG,kBAAkB,IAAlB,CAAuB,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,IAA/B,CAAvB,EAA6D,CAA7D,CAAZ,CAEA,GAAI,KAAK,GAAK,QAAd,CAAwB,CACtB,KAAK,CAAG,IAAI,GAAK,IAAT,CAAgB,KAAhB,CAAwB,KACjC,CACD,GAAI,KAAK,CAAC,UAAN,CAAiB,MAAjB,GAA4B,KAAK,CAAC,QAAN,CAAe,SAAf,CAAhC,CAA2D,CACzD,KAAK,CAAG,aACT,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,CAAA,KACR,CArBD,C,uBAuBA,GAAM,CAAA,QAAQ,CAAG,QAAX,CAAA,QAAW,CAAC,IAAD,CAAU,CACzB,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,QACzB,CAFD,C,2BAIA,GAAM,CAAA,QAAQ,CAAG,QAAX,CAAA,QAAW,CAAC,IAAD,CAAU,CACzB,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,QACzB,CAFD,C,2BAIA,GAAM,CAAA,SAAS,CAAG,QAAZ,CAAA,SAAY,CAAC,IAAD,CAAU,CAC1B,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,SACzB,CAFD,C,6BAIA,GAAM,CAAA,MAAM,CAAG,QAAT,CAAA,MAAS,CAAC,IAAD,CAAU,CACvB,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,MACzB,CAFD,C,uBAIA,GAAM,CAAA,WAAW,CAAG,QAAd,CAAA,WAAc,CAAC,IAAD,CAAU,CAC5B,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,WACzB,CAFD,C,iCAIA,GAAM,CAAA,KAAK,CAAG,QAAR,CAAA,KAAQ,CAAC,IAAD,CAAU,CACtB,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,KACzB,CAFD,C,qBAIA,GAAM,CAAA,QAAQ,CAAG,QAAX,CAAA,QAAW,CAAC,IAAD,CAAU,CACzB,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,QACzB,CAFD,C,2BAIA,GAAM,CAAA,UAAU,CAAG,QAAb,CAAA,UAAa,CAAC,IAAD,CAAU,CAC3B,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,UACzB,CAFD,C,+BAIA,GAAM,CAAA,QAAQ,CAAG,QAAX,CAAA,QAAW,CAAC,IAAD,CAAU,CACzB,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,QACzB,CAFD,C,2BAIA,GAAM,CAAA,OAAO,CAAG,QAAV,CAAA,OAAU,CAAC,IAAD,CAAU,CACxB,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,OACzB,CAFD,CAIA,GAAM,CAAA,aAAa,CAAG,QAAhB,CAAA,aAAgB,CAAC,IAAD,CAAU,CAC9B,MAAO,CAAA,MAAM,CAAC,IAAD,CAAN,GAAiB,aACzB,CAFD,C,kDAIe,CACb,MAAM,CAAN,MADa,CAEb,QAAQ,CAAR,QAFa,CAGb,QAAQ,CAAR,QAHa,CAIb,SAAS,CAAT,SAJa,CAKb,MAAM,CAAN,MALa,CAMb,WAAW,CAAX,WANa,CAOb,KAAK,CAAL,KAPa,CAQb,QAAQ,CAAR,QARa,CASb,UAAU,CAAV,UATa,CAUb,QAAQ,CAAR,QAVa,CAWb,aAAa,CAAb,aAXa,C","file":"is-type.js","sourcesContent":["import '@babel/polyfill'\nconst isType = (type) => {\n  let _type = /^\\[.+\\ +(.+)\\]$/.exec(Object.prototype.toString.call(type))[1]\n\n  if (_type === 'Number') {\n    _type = type !== type ? 'NaN' : _type\n  }\n  if (_type.startsWith('HTML') && _type.endsWith('Element')) {\n    _type = 'HTMLElement'\n  }\n  // [object String]\n  // [object Number]\n  // [object Boolean\n  // [object Null]\n  // [object Undefined]\n  // [object Object]\n  // [object RegExp]\n  // [object Function]\n  // [object Array]\n  // TODO: figure out Symbol type\n\n  return _type\n}\n\nconst isString = (type) => {\n  return isType(type) === 'String'\n}\n\nconst isNumber = (type) => {\n  return isType(type) === 'Number'\n}\n\nconst isBoolean = (type) => {\n  return isType(type) === 'Boolean'\n}\n\nconst isNull = (type) => {\n  return isType(type) === 'Null'\n}\n\nconst isUndefined = (type) => {\n  return isType(type) === 'Undefined'\n}\n\nconst isNaN = (type) => {\n  return isType(type) === 'NaN'\n}\n\nconst isObject = (type) => {\n  return isType(type) === 'Object'\n}\n\nconst isFunction = (type) => {\n  return isType(type) === 'Function'\n}\n\nconst isRegExp = (type) => {\n  return isType(type) === 'RegExp'\n}\n\nconst isArray = (type) => {\n  return isType(type) === 'Array'\n}\n\nconst isHTMLElement = (type) => {\n  return isType(type) === 'HTMLElement'\n}\n\nexport default {\n  isType,\n  isString,\n  isNumber,\n  isBoolean,\n  isNull,\n  isUndefined,\n  isNaN,\n  isObject,\n  isFunction,\n  isRegExp,\n  isHTMLElement\n}\n\nexport {\n  isType,\n  isString,\n  isNumber,\n  isBoolean,\n  isNull,\n  isUndefined,\n  isNaN,\n  isObject,\n  isFunction,\n  isRegExp,\n  isHTMLElement\n}"]}